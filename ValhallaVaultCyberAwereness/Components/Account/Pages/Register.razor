@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using ValhallaVaultCyberAwereness.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@using ValhallaVaultCyberAwereness.Components.Layout
@layout EmptyLayout
<PageTitle>Register</PageTitle>

    <div class="container py-4">
    <header class="pb-1 border-bottom">
        <div class="row align-items-center">
            <div class="col-auto">
                <img src="Images/logga.png" style="height: 50px; width: 50px;">
            </div>
            <div class="col">
                <span class="fs-4">be a part AB | Human-Centered Digital Solutions</span>
            </div>
        </div>
    </header>

    <div class="jumbotron jumbotron-fluid rounded-3" style="position: relative; overflow: hidden;">
        <video autoplay muted loop style="position: absolute; object-fit: cover; z-index: -1;">
            <source src="/Videos/circuit.mp4" type="video/mp4">
        </video>
        <div class="container-fluid py-5 d-flex justify-content-center align-items-center">
        
     
    <div class="col-md-4">
                <h1>Register</h1>
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <h2>Create a new account.</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3" style="color:black">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com"/>
                <label for="email">Username</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
                    <div class="form-floating mb-3" style="color:black">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
                    <div class="form-floating mb-3" style="color:black">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="confirm-password">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <div>
                        <label>
                            <InputCheckbox type="checkbox" @bind-Value="Input.AgreeToSomething" />
                            Jag har läst och förstått villkoren.
                        </label>
            </div>
            <div>
                        <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
            </div>
            <div>
                        @if (Input.AgreeToSomething == false )
                        {
                            <div>
                                <br />
                                <p font-size:larger"><b>@errorMessage</b></p>
                            </div>
                        
                        }
            </div>
            <div>
                        <p class="pt-1">
                            <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Login", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" style="color: white">Already have a Account? Sign in.</a>
                        </p>
            </div>
        </EditForm>
        </div>
</div>
</div>
</div>


@code {
    private string errorMessage = "";
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

  
    public async Task RegisterUser(EditContext editContext)
    {
        if (Input.AgreeToSomething == false)
        {
           
            errorMessage = "Du måste godkänna villkoren för att kunna skapa ett konto ";
            return; //Så vi inte fortsätter metoden.
        }
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        public bool AgreeToSomething { get; set; }
    }
}
