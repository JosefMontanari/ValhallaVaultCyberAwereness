@page "/questionpage/{questionId:int}"
@page "/questionpage/{categoryId:int}/{subCategoryId:int}"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using ValhallaVaultCyberAwereness.Data
@using ValhallaVaultCyberAwereness.Data.Models
@using ValhallaVaultCyberAwereness.Service
@using Microsoft.AspNetCore.Components.Authorization
@using static System.Net.WebRequestMethods
@rendermode InteractiveServer
@inject ValhallaVaultCyberAwereness.Service.CategoryRepo CategoryRepo
<!-- Fredrik testar: -->
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage


<h3>Frågor</h3>
<br />
<br />
@if (questionsForPage != null)
{

@if (CounterIndexQ < questionsForPage.Count)
{
	<div class="container mt-5" style="border:dotted; box-sizing:border-box">
		<div>
			<h3><b>@questionsForPage[CounterIndexQ].Title </b></h3>
			<h5> @questionsForPage[CounterIndexQ].Explanation </h5>
		</div>

			<form @onsubmit="() => {SaveUserAnswerAsync(questionsForPage[CounterIndexQ], selectedAnswer);ChangeQuestion();}">
			<div>
				@if (questionsForPage[CounterIndexQ].PossibleAnswers != null)
				{
					@foreach (string answer in questionsForPage[CounterIndexQ].PossibleAnswers)
					{
							<label style="background-color:@GetBackGroundColorLabel(answer)">
				<input type="radio" name="userAnswer" value="@answer" @onclick="() => SelectAnswer(answer)" checked="@IsAnswerSelected(answer)" />
							@answer
						</label>
						<br />
					}
				}
				else
				{
					<label>No answers added</label>
				}
			</div>
				<div class="d-flex align-items-center">
					@if(CounterIndexQ >0)
					{
					<div>
						<br />
							<button type="button" class="btn btn-outline-primary" style="text-align:right;" @onclick="() => CounterIndexQ -=1 ">Tillbaka</button>
						<br />
					</div>
					}
				
					<div class="ml-5 mr-5">
						<br />
						<button class=" btn btn-outline-primary mr-2 ml-2" style="text-align:center;" type="button" @onclick=(checkAnswer)>Kontrollera svar</button>
						<br />
					</div>
			
					<div>
						<br />
						<button type="submit" class="btn btn-outline-primary" style="text-align:right;">Nästa</button>
						<br />
					</div>
				</div>
		</form>
	</div>
		<br />

	}
	else
	{
		<div class="container " style="border:dotted; box-sizing:border-box">
			<div class="text-center">
				<h1>Klar med frågorna för detta segment</h1>
				<br />
				<button class=" btn btn-outline-primary btn-lg" style="text-align:center;" type="button" @onclick="@Reset">Starta igen?</button>
				<br />
			</div>
			
		</div>
		
	}
}


@code {
	private int CounterIndexQ = 0;
	[Parameter]
	public int categoryId { get; set; }

	[Parameter]
	public int subCategoryId { get; set; }

	[Parameter]
	public int questionId { get; set; }

	[Inject]
	private QuestionRepo questionRepos { get; set; }

	private Question question;

	[Inject]
	private AnswerRepo answerRepo { get; set; }
	private List<Question> questionsForPage = new List<Question>();

	private List<Segment> segments = new List<Segment>();

	private List<Question> questions = new List<Question>();
	[Inject]
	private SegmentRepo segmentRepo { get; set; }
	[Inject]
	private CategoryRepo categoryRepo { get; set; }
	[Inject]
	private QuestionRepo questionRepo { get; set; }
	[Inject]
	private NavigationManager navigationManager { get; set; }

	private Category selectedCategory;

	private string? selectedAnswer;
	private bool IsAnswerCorrect;
	private string UserchossenAnswer = "";

	private void Reset() //Starta om frågorna. counterindex startar om frågorna, men resten av variablerna nedan reseta så så inte "kontrolellera svar" buggade
	{
		CounterIndexQ = 0;
		UserchossenAnswer = "";
		IsAnswerCorrect = false;
		selectedAnswer = null;
	}

	private void ChangeQuestion() //Hålla koll på vilken fråga man är på. 
	{
		CounterIndexQ++;
	}


	private void checkAnswer()
	{
		IsAnswerCorrect = false;
		foreach(var answer in questionsForPage)
		{
			if (string.Equals(selectedAnswer, answer.CorrectAnswer, StringComparison.OrdinalIgnoreCase))
			{
				IsAnswerCorrect = true;
				break;
			}
		}
		UserchossenAnswer = selectedAnswer;
	}

	private string GetBackGroundColorLabel(string s) //sätter bakgrundsfärg varje label när användare ska kontrollera. 
	{
		if (s == UserchossenAnswer && IsAnswerCorrect == true)
		{ return "green"; }
		else if (s == UserchossenAnswer && IsAnswerCorrect == false)
		{ return "red"; }
		else{ return "initial"; }

	}

	// Metod som kollar om ett svars alternativ är valt eller ej
	private bool IsAnswerSelected(string answer)
	{
		return answer == selectedAnswer;
	}

	// Sparar en selectad answer i Localstorage för att senare senare hämtningar i sidan - blazor ticket
	private bool SelectAnswer(string answer)
	{
		selectedAnswer = answer;
		LocalStorage.SetItemAsync("selectedAnswer", selectedAnswer);
		return true;

	}

	protected override async Task OnInitializedAsync()
	{
	
		if (questionId != 0)
		{
			question = await questionRepos.GetQuestionByIdAsync(questionId);


		}
		else
		{

			segments = await segmentRepo.GetSegmentsByCategoryIdAsync(categoryId);
			// displaya vald category
			selectedCategory = await categoryRepo.GetCategoryByIdAsync(categoryId);
			// Displaya questions will varje segment
			questions = await questionRepo.GetAllQuestionAsync();
			questionsForPage = await questionRepo.GetSegmentQuestionAsync(subCategoryId);


		}
	}

	// För at komma åt Localstorage och åter-rendera sidan
	protected override async Task OnAfterRenderAsync(bool afterFirstRender)
	{
		if (afterFirstRender)
		{
			selectedAnswer = await LocalStorage.GetItemAsync<string>("selectedAnswer");
			StateHasChanged();
		}
	}

	private async Task SaveUserAnswerAsync(Question question, string userAnswer)
	{
		// Använda AuthenticationState för att kolla av user authenticated user, vem den inloggade usern är: userId osv.
		var authenticCheck = await AuthenticationStateProvider.GetAuthenticationStateAsync();

		// den inloggade usern från Authenticate blir en variabel och userns data: som roles, username sparas i LoggedInUser
		var loggedInUser = authenticCheck.User;

		// ändrar den "inloggade" usern till en ApplicationUser ( under Application DbContext ) 
		var user = await UserManager.GetUserAsync(loggedInUser);

		if (user != null)
		{
			// Se om användaren redanhar svarat en gång
			var existingAnswer = await answerRepo.GetUserAnswerAsync(user.Id, question.QuestionId);

			bool isAnswerCorrect = string.Equals(userAnswer, question.CorrectAnswer, StringComparison.OrdinalIgnoreCase);

			if (existingAnswer == null)
			{
				// Om svar ej finns, lägg till
				var answerUser = new AnswerUser
					{
						User = user,
						QuestionId = question.QuestionId,
						Question = question,
						UserAnswer = userAnswer,
						IsAnswerCorrect = isAnswerCorrect,
					};

				await answerRepo.AddUserAnswersAsync(answerUser);
			}
			else
			{
				// Else ändra svar
				existingAnswer.UserAnswer = userAnswer;
				existingAnswer.IsAnswerCorrect = isAnswerCorrect;
				await answerRepo.UpdateUserAnswersAsync(existingAnswer);
			}
		
			await InvokeAsync(() => StateHasChanged());
		}
		else
		{
			Console.WriteLine("User not found");
		}

		
	}
}
