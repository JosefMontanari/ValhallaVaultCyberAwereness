@page "/questionpage/{questionId:int}"
@page "/questionpage/{categoryId:int}/{subCategoryId:int}"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using ValhallaVaultCyberAwereness.Data
@using ValhallaVaultCyberAwereness.Data.Models
@using ValhallaVaultCyberAwereness.Service
@using Microsoft.AspNetCore.Components.Authorization
@rendermode InteractiveServer
@inject ValhallaVaultCyberAwereness.Service.CategoryRepo CategoryRepo
<!-- Fredrik testar: -->
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage


<h3>QuestionsPage</h3>

@* Tillfällig sida, bara länkar hit för "frågesida" *@
@if(question != null)
{
<h1>Question ID: @questionId</h1>
	<h1>Question Title: @question.Title</h1>
<h1>Frågan är: @question.Explanation</h1>
}


@foreach (var q in questions.Where(q => q.SegmentId == subCategoryId))
{
	<div class="container " style="border:dotted; box-sizing:border-box">
		<div>
			<h3><b>@q.Title </b></h3>
			<b> @q.Explanation</b>
		</div>

		<form @onsubmit="() => SaveUserAnswerAsync(q, selectedAnswer)">
			<div>
				@if (q.PossibleAnswers != null)
				{
					@foreach (string qz in q.PossibleAnswers)
					{
						<label>
							<input type="radio" name="userAnswer" value="@qz" @onclick="() => SelectAnswer(qz)" checked="@IsAnswerSelected(qz)" />
							@qz
						</label>
						<br />
					}
					<div class="d-flex align-items-center">
						<div>
							<br />
							<button class="btn btn-outline-primary" style="text-align:center;" type="submit">Kontrollera svar</button>
							<br />
						</div>
						<div>
							<br />
							<button class="btn btn-outline-primary" style="text-align:right;">Nästa</button>
							<br />
						</div>
					</div>
				}
				else
				{
					<label>No answers added</label>
				}
			</div>
		</form>
	</div>
	<br />
}



@code {
	[Parameter]
	public int categoryId { get; set; }

	[Parameter]
	public int subCategoryId { get; set; }

	[Parameter]
	public int questionId { get; set; }

	[Inject]
	private QuestionRepo questionRepos { get; set; }

	private Question question;

	[Inject]
	private AnswerRepo answerRepo { get; set; }

	private List<Segment> segments = new List<Segment>();
	
	private List<Question> questions = new List<Question>();
	[Inject]
	private SegmentRepo segmentRepo { get; set; }
	[Inject]
	private CategoryRepo categoryRepo { get; set; }
	[Inject]
	private QuestionRepo questionRepo { get; set; }
	[Inject]
	private NavigationManager navigationManager { get; set; }

	private Category selectedCategory;

 	private string selectedAnswer;


	 // Metod som kollar om ett svars alternativ är valt eller ej
	private bool IsAnswerSelected(string answer)
	{
		return answer == selectedAnswer;
	}

	// Sparar en selectad answer i Localstorage för att senare senare hämtningar i sidan - blazor ticket
	private void SelectAnswer(string answer)
	{
		selectedAnswer = answer;
		LocalStorage.SetItemAsync("selectedAnswer", selectedAnswer);
	}

	protected override async Task OnInitializedAsync()
	{
		if (questionId != 0)
		{
			question = await questionRepos.GetQuestionByIdAsync(questionId);
		}
		else
		{
			segments = await segmentRepo.GetSegmentsByCategoryIdAsync(categoryId);
			// displaya vald category
			selectedCategory = await categoryRepo.GetCategoryByIdAsync(categoryId);
			// Displaya questions will varje segment
			questions = await questionRepo.GetAllQuestionAsync();
		}
	}

	// För at komma åt Localstorage och åter-rendera sidan
	protected override async Task OnAfterRenderAsync(bool afterFirstRender)
	{
		if (afterFirstRender)
		{
			selectedAnswer = await LocalStorage.GetItemAsync<string>("selectedAnswer");
			StateHasChanged();
		}
	}

	private async Task SaveUserAnswerAsync(Question question, string userAnswer)
	{
		// Använda AuthenticationState för att kolla av user authenticated user, vem den inloggade usern är: userId osv.
		var authenticCheck = await AuthenticationStateProvider.GetAuthenticationStateAsync();

		// den inloggade usern från Authenticate blir en variabel och userns data: som roles, username sparas i LoggedInUser
		var loggedInUser = authenticCheck.User;

		// ändrar den "inloggade" usern till en ApplicationUser ( under Application DbContext ) 
		var user = await UserManager.GetUserAsync(loggedInUser);

		if (user != null)
		{
			// Se om användaren redanhar svarat en gång
			var existingAnswer = await answerRepo.GetUserAnswerAsync(user.Id, question.QuestionId);

			bool isAnswerCorrect = string.Equals(userAnswer, question.CorrectAnswer, StringComparison.OrdinalIgnoreCase);

			if (existingAnswer == null)
			{
				// Om svar ej finns, lägg till
				var answerUser = new AnswerUser
					{
						User = user,
						QuestionId = question.QuestionId,
						Question = question,
						UserAnswer = userAnswer,
						IsAnswerCorrect = isAnswerCorrect,
					};

				await answerRepo.AddUserAnswersAsync(answerUser);
			}
			else
			{
				// Else ändra svar
				existingAnswer.UserAnswer = userAnswer;
				existingAnswer.IsAnswerCorrect = isAnswerCorrect;
				await answerRepo.UpdateUserAnswersAsync(existingAnswer);
			}
		
			await InvokeAsync(() => StateHasChanged());
		}
		else
		{
			Console.WriteLine("User not found");
		}

		
	}
}
