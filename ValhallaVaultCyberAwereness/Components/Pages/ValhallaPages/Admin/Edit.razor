@page "/edit/{type}/{id:int}"
@using Microsoft.AspNetCore.Authorization
@using ValhallaVaultCyberAwereness.Data.Models
@using ValhallaVaultCyberAwereness.Service
@rendermode InteractiveServer
@inject CategoryRepo categoryRepo
@inject SegmentRepo segmentRepo
@inject QuestionRepo questionRepo
@inject NavigationManager navigationManager
@attribute [Authorize(Roles= "Admin")]
<h3>Edit</h3>

@if(CategoryToEdit != null)
{
	<div class="row">
		<EditForm Model="CategoryToEdit" OnValidSubmit="HandleSubmit">
			<div class="col-lg-6">
				<label>Category name:</label>
				<DataAnnotationsValidator />
				<InputText id="CategoryName" @bind-Value="CategoryToEdit.Categories" class="form-control"></InputText>
				<ValidationSummary></ValidationSummary>
			</div>
			<br />
			<button type="submit" class="btn btn-outline-dark" style="color:antiquewhite">Submit</button>
			<button type="button" class="btn btn-outline-dark" style="color:antiquewhite" @onclick="DeleteCategory">Delete Category</button>
		</EditForm>

	</div>

}
else if(SegmentToEdit != null)
{
	<div class="row">
		<EditForm Model="SegmentToEdit" OnValidSubmit="HandleSubmit">
			<div class="col-lg-8">
				<label>Segment name:</label>
				<DataAnnotationsValidator />
				<InputText id="SegmentName" @bind-Value="SegmentToEdit.SegmentTitle" class="form-control"></InputText>
				<ValidationSummary></ValidationSummary>
				<br />
			</div>

			<div class="col-lg-8">
				<label>Choose category:</label>
				<InputSelect @bind-Value="SegmentToEdit.CategoryId" class="form-select">
					<option value="">None</option>
					@foreach (var category in categoryRepo.categories)
					{
						<option value="@category.CategoryId">@category.Categories</option>
					}
				</InputSelect>
			</div>
			<br />
			<button type="submit" class="btn btn-outline-dark" style="color:antiquewhite">Submit</button>
			<button type="button" class="btn btn-outline-dark" style="color:antiquewhite" @onclick="DeleteSegment">Delete Segment</button>

		</EditForm>
	</div>

}
else if(QuestionToEdit != null)
{
	<div class="row">

		<EditForm Model="QuestionToEdit" OnValidSubmit="HandleSubmit">
			<div class="col-lg-8">
				<label>Question title:</label>
				<DataAnnotationsValidator />
				<InputText id="QuestionTitle" @bind-Value="QuestionToEdit.Title" class="form-control"></InputText>
				<ValidationSummary></ValidationSummary>
				<br />
			</div>

			<div class="col-lg-8">
				<label>Question:</label>
				<InputTextArea id="Question" @bind-Value="QuestionToEdit.Questions" class="form-control"></InputTextArea>
				<br />
			</div>

			<div class="col-lg-8">
				<label>(Optional) Possible answers:</label>
				<InputText id="QuestionAnswerOne" @bind-Value="QuestionToEdit.PossibleAnswers[0]" class="form-control"></InputText>
				<InputText id="QuestionAnswerTwo" @bind-Value="QuestionToEdit.PossibleAnswers[1]" class="form-control"></InputText>
				<InputText id="QuestionAnswerThree" @bind-Value="QuestionToEdit.PossibleAnswers[2]" class="form-control"></InputText>
				<br />
			</div>

			<div class="col-lg-8">
				<label>Correct answer (Has to be identical with one of the answers):</label>
				<InputText id="QuestionAnswer" @bind-Value="QuestionToEdit.CorrectAnswer" class="form-control"></InputText>
				<p class="alert-warning">@ErrorMessage</p>
			</div>

			<div class="col-lg-8">
				<label>Explanation:</label>
				<InputTextArea id="QuestionExplanation" @bind-Value="QuestionToEdit.Explanation" class="form-control"></InputTextArea>
				<br />
			</div>

			<div class="col-lg-8">
				<label>Choose segment:</label>
				<InputSelect @bind-Value="QuestionToEdit.SegmentId" class="form-select">
					<option value="">None</option>
					@foreach (var segment in segmentRepo.segments)
					{
						<option value="@segment.SegmentId">
							@segment.SegmentTitle
							@if (@segment.Category != null)
							{
								<span> (@segment.Category.Categories)</span>
							}
						</option>
					}
				</InputSelect>
			</div>

			<br />
			<button type="submit" class="btn btn-outline-dark" style="color:antiquewhite">Submit</button>
			<button type="button" class="btn btn-outline-dark" style="color:antiquewhite" @onclick="DeleteQuestion">Delete Segment</button>
		</EditForm>

	</div>

}
else
{
	<span>Loading...</span>
}

@code {
	[Parameter]
	public int Id { get; set; }
	[Parameter]
	public string? Type { get; set; }
	public Category? CategoryToEdit { get; set; }
	public Segment? SegmentToEdit { get; set; }
	public Question? QuestionToEdit { get; set; }
	private bool AnswerIsPossible { get; set; } = false;
	private string ErrorMessage { get; set; } = "";


	protected async override Task OnParametersSetAsync()
	{
		if(Type == "Category")
		{

			CategoryToEdit = await categoryRepo.GetCategoryByIdAsync(Id);
		}
		else if(Type == "Segment")
		{
			SegmentToEdit = await segmentRepo.GetSegmentByIdAsync(Id);
		}
		else if(Type == "Question")
		{
			QuestionToEdit = await questionRepo.GetQuestionByIdAsync(Id);
		}
	}

	private async void HandleSubmit()
	{
		if(CategoryToEdit != null)
		{
			await categoryRepo.UpdateCategoryAsync(CategoryToEdit);
			navigationManager.NavigateTo("/admin");

		}
		else if(SegmentToEdit != null)
		{
			await segmentRepo.UpdateSegmentAsync(SegmentToEdit);
			navigationManager.NavigateTo("/admin");

		}
		else if (QuestionToEdit != null)
		{
			foreach (var answer in QuestionToEdit.PossibleAnswers)
			{
				if (answer == QuestionToEdit.CorrectAnswer)
				{
					AnswerIsPossible = true;
				}
			}
			if (AnswerIsPossible)
			{
				
			await questionRepo.UpdateQuestionAsync(QuestionToEdit);
			navigationManager.NavigateTo("/admin");
			}
			ErrorMessage = "Answer has to be identical to one of the possible answers!";


		}
	}
	private async void DeleteCategory()
	{
		await categoryRepo.DeleteCategoryAsync(CategoryToEdit);
	}
	private async void DeleteSegment()
	{
		await segmentRepo.DeleteSegment(SegmentToEdit);
	}
	private async void DeleteQuestion()
	{
		await questionRepo.DeleteQuestionAsync(QuestionToEdit);
	}
}
