@page "/add/question"
@using Microsoft.AspNetCore.Authorization
@using ValhallaVaultCyberAwereness.Data.Models
@using ValhallaVaultCyberAwereness.Service
@rendermode InteractiveServer
@inject QuestionRepo questionRepo
@inject SegmentRepo segmentRepo
@inject NavigationManager navigationManager
@attribute [Authorize(Roles = "Admin")]

<EditForm Model="QuestionToAdd" OnValidSubmit="HandleSubmit">
	<div>
		<label>Question title:</label>
		<DataAnnotationsValidator />
		<InputText id="QuestionTitle" @bind-Value="QuestionToAdd.Title" class="form-control"></InputText>
		<ValidationSummary></ValidationSummary>
	</div>

	<div>
		<label>Question:</label>
		<InputText id="Question" @bind-Value="QuestionToAdd.Questions" class="form-control"></InputText>
	</div>

	<div>
		<label>(Optional) Possible answers:</label>
		<InputText id="QuestionAnswerOne" @bind-Value="QuestionToAdd.PossibleAnswers[0]" class="form-control"></InputText>
		<InputText id="QuestionAnswerTwo" @bind-Value="QuestionToAdd.PossibleAnswers[1]" class="form-control"></InputText>
		<InputText id="QuestionAnswerThree" @bind-Value="QuestionToAdd.PossibleAnswers[2]" class="form-control"></InputText>
	</div>

	<div>
		<label>Correct answer (Has to be identical with one of the answers):</label>
		<InputText id="QuestionAnswer" @bind-Value="QuestionToAdd.CorrectAnswer" class="form-control"></InputText>
	</div>

	<div>
		<label>Choose segment:</label>
		<InputSelect @bind-Value="QuestionToAdd.SegmentId" class="form-select">
			<option value="">None</option>
			@foreach (var segment in segmentRepo.segments)
			{
				<option value="@segment.SegmentId">
					@segment.SegmentTitle
					@if (@segment.Category != null)
					{
						<span> (@segment.Category.Categories)</span>
					}
				</option>
			}
		</InputSelect>
	</div>

	<br />
	<button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@code {
	public Question? QuestionToAdd { get; set; } = new(){CorrectAnswer = "",PossibleAnswers = new List<string>(){"","",""}, Explanation = "", Segment = null, Title = ""};

	protected override void OnInitialized()
	{
		base.OnInitialized();
	}

	private async void HandleSubmit()
	{
		await questionRepo.AddQuestionAsync(QuestionToAdd);
		navigationManager.NavigateTo("/admin");
	}
}