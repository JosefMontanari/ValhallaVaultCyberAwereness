@page "/subcategory/{categoryId:int}/{subCategoryId:int}"
@using Microsoft.AspNetCore.Authorization
@using ValhallaVaultCyberAwereness.Data.Models
@using ValhallaVaultCyberAwereness.Service
@inject ValhallaVaultCyberAwereness.Service.CategoryRepo CategoryRepo
@inject NavigationManager navigationmanager
@attribute [Authorize]


@if (segments.Count() != 0)
{
    if (segments.Count() >= subCategoryId)
    {
        <h3>@segments.FirstOrDefault(t => t.SegmentId == subCategoryId && t.CategoryId == categoryId).SegmentTitle </h3>
    }
}

@if (segments.Any())
{
    @if (CheckSegment())
    {
    <div>
                <!--Displaya alla questions will varje fråga-->
        <div>
        @foreach (var question in questions.Where(q => q.SegmentId == subCategoryId))
                {
                          <br />
                        <p><strong>Subkategori @question.Title</strong></p>          
                }
            <a href="/questionpage/@categoryId/@subCategoryId">  <button class="btn btn-outline-dark" style="color:antiquewhite">Testa frågorna för del @subCategoryId</button> </a>
        </div>
    </div>
}
}

else
{
    <p>Hmm.. error 404.</p>
}


@code {

    private bool CheckSegment()
    {
        @if (segments.Count() != 0)
        {
            foreach(var seg in segments)
            {
                if (seg.CategoryId == categoryId && seg.SegmentId == subCategoryId)
                {
                    return true;
                }

            }
            return false;
        }
        return false;
    }
	private void GoToCategoryPage() 
	{
		// gå till Categoriy PAge
		navigationManager.NavigateTo("/categorypage");
	}
    private bool IsLoading { get; set; }
    bool runload = true;
    private List<Segment> segments = new List<Segment>();
    private List<Question> questions = new List<Question>();
    [Inject]
    private SegmentRepo segmentRepo { get; set; }
    [Inject]
    private CategoryRepo categoryRepo { get; set; }
    [Inject]
    private QuestionRepo questionRepo { get; set; }
    [Inject]
    private NavigationManager navigationManager { get; set; }


    [Parameter]
    public int categoryId { get; set; }

    [Parameter]
    public int subCategoryId { get; set; }


    private Category selectedCategory;

    protected override async Task OnInitializedAsync()
    {
        segments = await segmentRepo.GetSegmentsByCategoryIdAsync(categoryId);
        
      //  segments = await segmentRepo.GetSegmentsByCategoryIdAsync(categoryId);
        // displaya vald category
        selectedCategory = await categoryRepo.GetCategoryByIdAsync(categoryId);
        // Displaya questions will varje segment
        questions = await questionRepo.GetAllQuestionAsync();

    }
}
