@page "/segmentpage/{categoryId:int}"
@using Microsoft.AspNetCore.Authorization
@using ValhallaVaultCyberAwereness.Data
@using ValhallaVaultCyberAwereness.Data.Models
@using ValhallaVaultCyberAwereness.Service
@inject Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider AuthenticationStateProvider
@inject Microsoft.AspNetCore.Identity.UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

@attribute [Authorize]

<h3>Segment</h3>

@if (segments.Any())
{
    <div>
        <h4>I detta segment handlar det om @selectedCategory.Categories och dess subkategorier</h4>
        <br />

        @foreach (var segment in segments)
        {
            // Räkna ut antal rätt , gör if statements sen för > || < 80
            double percentCorrect = segment.CalculateCorrectAnswers(userAnswersbyid, userId);

            <div>
                <button type="button" class="btn btn-outline-dark" style="color: antiquewhite" @onclick="() => StartSegment(segment.SegmentId)">
                    <h3><strong>@segment.SegmentTitle</strong></h3>
                </button>


                @*Om segmentId i loopen är lika med valt segment: currentSegmentId, så visa visa en error om de andra 80% är mött. Visa errormessage på vald segment *@
                @if (segment.SegmentId == currentSegmentId)
                {
                    // visa error hårdkodad error i metoden istället för: mindre än 80%
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <p>@errorMessage</p>
                    }
                }

                @*Om  percentCorrect är mindre än 80 && vald segmentId inte är lika med currentSegmentId, visa deras % *@
                @if (percentCorrect < 80 && segment.SegmentId != currentSegmentId)
                {
                    <p>Du har mindre än 80% rätt i detta segment</p> 
                }
                else if (percentCorrect >= 80)
                {
                    <p>Antal rätt i detta segment: @percentCorrect.ToString("F2")%</p>
                }
            </div>
            <br />
        }
    </div>
}
else
{
    <p>No segments Found.</p>
}

@code {
    private List<Segment> segments = new List<Segment>();
    private List<Question> questions = new List<Question>();
    [Inject]
    private SegmentRepo segmentRepo { get; set; }
    [Inject]
    private CategoryRepo categoryRepo { get; set; }
    [Inject]
    private QuestionRepo questionRepo { get; set; }

    [Parameter]
    public int categoryId { get; set; }

    // test
    private Segment segment = new Segment();

    private List<AnswerUser> userAnswersById = new List<AnswerUser>();

    private int currentSegmentId; 
    private string errorMessage = "";
    private bool displayErrorMessage = true;

    private List<Category> categories;
    private List<AnswerUser>? userAnswers;
    private List<AnswerUser>? userAnswersbyid;
    private string userId;

    [Inject]
    private AnswerRepo answerRepo { get; set; }

    private Category selectedCategory;

    protected override async Task OnInitializedAsync()
    {
        segments = await segmentRepo.GetSegmentsByCategoryIdAsync(categoryId);

        // displaya vald category
        selectedCategory = await categoryRepo.GetCategoryByIdAsync(categoryId);

        // Från CP
        var authenticCheck = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var loggedInUser = authenticCheck.User;
        var userObject = await UserManager.GetUserAsync(loggedInUser);
        userId = userObject.Id;

        // Displaya questions will varje segment
        questions = await questionRepo.GetAllQuestionAsync();

        userAnswersbyid = await answerRepo.GetUserAnswersByIdAsync(userId);
    }

    private async Task StartSegment(int segmentId)
    {
        if (segments.Any())
        {
            // låt user starta första segment
            if (segmentId == segments.First().SegmentId)
            {
                NavigationManager.NavigateTo($"/subcategory/{categoryId}/{segmentId}");
                return;
                // Sätt en bool til true och ta bort navi i subcategorypage & question page senare för att inte kunna fula
            }

            // kolla om tidigare segement är klar med -1 annars 0 (använd linq)
            var previousSegmentId = segments
                .OrderBy(s => s.SegmentId)
                .FirstOrDefault(s => s.SegmentId >= segmentId - 1)?.SegmentId ?? 0;

            var previousSegment = segments.FirstOrDefault(s => s.SegmentId == previousSegmentId);

            if (previousSegment != null)
            {
                //räkna om prev.Segment till percentCorrect för att låta user gå vidare
                double percentCorrect = previousSegment.CalculateCorrectAnswers(userAnswersbyid, userId);

                if (percentCorrect >= 80)
                {
                    NavigationManager.NavigateTo($"/subcategory/{categoryId}/{segmentId}");
                }
                else
                {
                    errorMessage = "Ni måste slutföra den första/tidigare segment för att kunna fortsätta till denna";

                    // fixa denna och displaya på endast segment som inte är slutförd - använd segmentId för att displayas på.
                }
            }
        }
        // Sätt segmentId till currentId och uppdatera i cSID. If checks finns på foreachen.
        currentSegmentId = segmentId;
    }
}
