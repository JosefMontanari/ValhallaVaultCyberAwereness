// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ValhallaVaultCyberAwereness.Data;

#nullable disable

namespace ValhallaVaultCyberAwereness.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240305104940_seed")]
    partial class seed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ValhallaVaultCyberAwereness.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ValhallaVaultCyberAwereness.Data.Models.AnswerUser", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<bool>("IsAnswerCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("ValhallaVaultCyberAwereness.Data.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Categories")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Categories = "Network Security"
                        },
                        new
                        {
                            CategoryId = 2,
                            Categories = "Web Application Security"
                        },
                        new
                        {
                            CategoryId = 3,
                            Categories = "Mobile Security"
                        },
                        new
                        {
                            CategoryId = 4,
                            Categories = "Cloud Security"
                        });
                });

            modelBuilder.Entity("ValhallaVaultCyberAwereness.Data.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PossibleAnswers")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Questions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SegmentId")
                        .HasColumnType("int");

                    b.HasKey("QuestionId");

                    b.HasIndex("SegmentId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            QuestionId = 13,
                            CorrectAnswer = "Identifying vulnerabilities in a network or system",
                            PossibleAnswers = "[\"Identifying vulnerabilities in a network or system\",\"Testing code for security flaws\",\"Managing server configurations\"]",
                            Questions = "What is the primary goal of a penetration tester?",
                            SegmentId = 1
                        },
                        new
                        {
                            QuestionId = 2,
                            CorrectAnswer = "Computer Security Incident Response Team",
                            PossibleAnswers = "[\"Computer Security Incident Response Team\",\"Cyber Security Information Retrieval Tool\",\"Corporate Security Incident Resolution Team\"]",
                            Questions = "In the context of incident response, what does 'CSIRT' stand for?",
                            SegmentId = 2
                        },
                        new
                        {
                            QuestionId = 3,
                            CorrectAnswer = "To prevent vulnerabilities and reduce the risk of exploitation",
                            PossibleAnswers = "[\"To prevent vulnerabilities and reduce the risk of exploitation\",\"To increase server performance\",\"To enhance user interface design\"]",
                            Questions = "Why is secure coding important in web development?",
                            SegmentId = 3
                        },
                        new
                        {
                            QuestionId = 4,
                            CorrectAnswer = "To filter and control incoming and outgoing network traffic",
                            PossibleAnswers = "[\"To filter and control incoming and outgoing network traffic\",\"To improve website performance\",\"To design graphical user interfaces\"]",
                            Questions = "What is the purpose of a firewall in network security?",
                            SegmentId = 1
                        },
                        new
                        {
                            QuestionId = 5,
                            CorrectAnswer = "A type of security attack where malicious scripts are injected into web pages",
                            PossibleAnswers = "[\"A type of security attack where malicious scripts are injected into web pages\",\"A programming language for web development\",\"A protocol for secure data transfer\"]",
                            Questions = "What does the term 'Cross-Site Scripting (XSS)' refer to?",
                            SegmentId = 2
                        },
                        new
                        {
                            QuestionId = 6,
                            CorrectAnswer = "By requiring users to provide two forms of identification before granting access",
                            PossibleAnswers = "[\"By requiring users to provide two forms of identification before granting access\",\"By encrypting data on the server\",\"By blocking all incoming network traffic\"]",
                            Questions = "How does two-factor authentication enhance security?",
                            SegmentId = 3
                        },
                        new
                        {
                            QuestionId = 7,
                            CorrectAnswer = "To create a secure and encrypted connection over the internet",
                            PossibleAnswers = "[\"To create a secure and encrypted connection over the internet\",\"To manage virtual private servers\",\"To monitor network traffic for vulnerabilities\"]",
                            Questions = "What is the main purpose of a VPN in network security?",
                            SegmentId = 1
                        },
                        new
                        {
                            QuestionId = 8,
                            CorrectAnswer = "Granting users the minimum levels of access needed to perform their jobs",
                            PossibleAnswers = "[\"Granting users the minimum levels of access needed to perform their jobs\",\"Providing maximum access to all users by default\",\"Restricting access only to administrators\"]",
                            Questions = "What is the principle of least privilege in access control?",
                            SegmentId = 4
                        },
                        new
                        {
                            QuestionId = 9,
                            CorrectAnswer = "Using parameterized queries and prepared statements",
                            PossibleAnswers = "[\"Using parameterized queries and prepared statements\",\"Increasing server processing power\",\"Encrypting all database entries\"]",
                            Questions = "What is a common method to protect against SQL injection attacks?",
                            SegmentId = 3
                        },
                        new
                        {
                            QuestionId = 10,
                            CorrectAnswer = "To filter and monitor HTTP traffic between a web application and the internet",
                            PossibleAnswers = "[\"To filter and monitor HTTP traffic between a web application and the internet\",\"To optimize website loading speed\",\"To manage domain name registrations\"]",
                            Questions = "What is the purpose of a WAF (Web Application Firewall) in web security?",
                            SegmentId = 2
                        },
                        new
                        {
                            QuestionId = 11,
                            CorrectAnswer = "An attempt to trick individuals into revealing sensitive information",
                            PossibleAnswers = "[\"An attempt to trick individuals into revealing sensitive information\",\"A type of malware that encrypts files and demands a ransom\",\"A method of securing communication channels\"]",
                            Questions = "What does the term 'phishing' refer to in cybersecurity?",
                            SegmentId = 2
                        },
                        new
                        {
                            QuestionId = 12,
                            CorrectAnswer = "To use unique physical or behavioral traits for user identification",
                            PossibleAnswers = "[\"To use unique physical or behavioral traits for user identification\",\"To store passwords in a secure database\",\"To encrypt data during transmission\"]",
                            Questions = "What is the purpose of biometric authentication?",
                            SegmentId = 3
                        });
                });

            modelBuilder.Entity("ValhallaVaultCyberAwereness.Data.Models.Segment", b =>
                {
                    b.Property<int>("SegmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SegmentId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("SegmentTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SegmentId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Segments");

                    b.HasData(
                        new
                        {
                            SegmentId = 1,
                            CategoryId = 1,
                            SegmentTitle = "Penetration Testing"
                        },
                        new
                        {
                            SegmentId = 2,
                            CategoryId = 1,
                            SegmentTitle = "Incident Response"
                        },
                        new
                        {
                            SegmentId = 3,
                            CategoryId = 2,
                            SegmentTitle = "Secure Coding"
                        },
                        new
                        {
                            SegmentId = 4,
                            CategoryId = 2,
                            SegmentTitle = "Authentication & Authorization"
                        },
                        new
                        {
                            SegmentId = 5,
                            CategoryId = 3,
                            SegmentTitle = "Mobile App Security"
                        },
                        new
                        {
                            SegmentId = 6,
                            CategoryId = 3,
                            SegmentTitle = "Device Security"
                        },
                        new
                        {
                            SegmentId = 7,
                            CategoryId = 4,
                            SegmentTitle = "Cloud Architecture Security"
                        },
                        new
                        {
                            SegmentId = 8,
                            CategoryId = 4,
                            SegmentTitle = "Data Encryption in the Cloud"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ValhallaVaultCyberAwereness.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ValhallaVaultCyberAwereness.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ValhallaVaultCyberAwereness.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ValhallaVaultCyberAwereness.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ValhallaVaultCyberAwereness.Data.Models.AnswerUser", b =>
                {
                    b.HasOne("ValhallaVaultCyberAwereness.Data.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ValhallaVaultCyberAwereness.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ValhallaVaultCyberAwereness.Data.Models.Question", b =>
                {
                    b.HasOne("ValhallaVaultCyberAwereness.Data.Models.Segment", "Segment")
                        .WithMany("Question")
                        .HasForeignKey("SegmentId");

                    b.Navigation("Segment");
                });

            modelBuilder.Entity("ValhallaVaultCyberAwereness.Data.Models.Segment", b =>
                {
                    b.HasOne("ValhallaVaultCyberAwereness.Data.Models.Category", "Category")
                        .WithMany("Segments")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ValhallaVaultCyberAwereness.Data.Models.Category", b =>
                {
                    b.Navigation("Segments");
                });

            modelBuilder.Entity("ValhallaVaultCyberAwereness.Data.Models.Segment", b =>
                {
                    b.Navigation("Question");
                });
#pragma warning restore 612, 618
        }
    }
}
